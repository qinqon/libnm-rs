// This file was generated by gir (https://github.com/gtk-rs/gir)
// from /home/ellorent/Documents/cnv/upstream/gir-files
// from gir-files
// DO NOT EDIT

use glib::object::IsA;
use glib::object::ObjectType as ObjectType_;
use glib::signal::connect_raw;
use glib::signal::SignalHandlerId;
use glib::translate::*;
use glib::StaticType;
use glib::ToValue;
use std::boxed::Box as Box_;
use std::fmt;
#[cfg(any(feature = "v1_24", feature = "dox"))]
#[cfg_attr(feature = "dox", doc(cfg(feature = "v1_24")))]
use std::mem;
use std::mem::transmute;
use std::pin::Pin;
use std::ptr;

glib::wrapper! {
    #[doc(alias = "NMClient")]
    pub struct Client(Object<ffi::NMClient, ffi::NMClientClass>);

    match fn {
        type_ => || ffi::nm_client_get_type(),
    }
}

impl Client {
    #[doc(alias = "nm_client_new")]
    pub fn new(cancellable: Option<&impl IsA<gio::Cancellable>>) -> Result<Client, glib::Error> {
        unsafe {
            let mut error = ptr::null_mut();
            let ret = ffi::nm_client_new(cancellable.map(|p| p.as_ref()).to_glib_none().0, &mut error);
            if error.is_null() { Ok(from_glib_full(ret)) } else { Err(from_glib_full(error)) }
        }
    }

    //#[doc(alias = "nm_client_activate_connection_async")]
    //pub fn activate_connection_async<P: FnOnce(Result</*Ignored*/ActiveConnection, glib::Error>) + 'static>(&self, connection: /*Ignored*/Option<&Connection>, device: /*Ignored*/Option<&Device>, specific_object: Option<&str>, cancellable: Option<&impl IsA<gio::Cancellable>>, callback: P) {
    //    unsafe { TODO: call ffi:nm_client_activate_connection_async() }
    //}

    //
    //pub fn activate_connection_future(&self, connection: /*Ignored*/Option<&Connection>, device: /*Ignored*/Option<&Device>, specific_object: Option<&str>) -> Pin<Box_<dyn std::future::Future<Output = Result</*Ignored*/ActiveConnection, glib::Error>> + 'static>> {

        //let connection = connection.map(ToOwned::to_owned);
        //let device = device.map(ToOwned::to_owned);
        //let specific_object = specific_object.map(ToOwned::to_owned);
        //Box_::pin(gio::GioFuture::new(self, move |obj, cancellable, send| {
        //    obj.activate_connection_async(
        //        connection.as_ref().map(::std::borrow::Borrow::borrow),
        //        device.as_ref().map(::std::borrow::Borrow::borrow),
        //        specific_object.as_ref().map(::std::borrow::Borrow::borrow),
        //        Some(cancellable),
        //        move |res| {
        //            send.resolve(res);
        //        },
        //    );
        //}))
    //}

    //#[cfg(any(feature = "v1_16", feature = "dox"))]
    //#[cfg_attr(feature = "dox", doc(cfg(feature = "v1_16")))]
    //#[doc(alias = "nm_client_add_and_activate_connection2")]
    //pub fn add_and_activate_connection2<P: FnOnce(Result</*Ignored*/ActiveConnection, glib::Error>) + 'static>(&self, partial: /*Ignored*/Option<&Connection>, device: /*Ignored*/&Device, specific_object: Option<&str>, options: &glib::Variant, cancellable: Option<&impl IsA<gio::Cancellable>>, callback: P) {
    //    unsafe { TODO: call ffi:nm_client_add_and_activate_connection2() }
    //}

    //
    //#[cfg(any(feature = "v1_16", feature = "dox"))]
    //#[cfg_attr(feature = "dox", doc(cfg(feature = "v1_16")))]
    //pub fn add_and_activate_connection2_future(&self, partial: /*Ignored*/Option<&Connection>, device: /*Ignored*/&Device, specific_object: Option<&str>, options: &glib::Variant) -> Pin<Box_<dyn std::future::Future<Output = Result</*Ignored*/ActiveConnection, glib::Error>> + 'static>> {

        //let partial = partial.map(ToOwned::to_owned);
        //let device = device.clone();
        //let specific_object = specific_object.map(ToOwned::to_owned);
        //let options = options.clone();
        //Box_::pin(gio::GioFuture::new(self, move |obj, cancellable, send| {
        //    obj.add_and_activate_connection2(
        //        partial.as_ref().map(::std::borrow::Borrow::borrow),
        //        &device,
        //        specific_object.as_ref().map(::std::borrow::Borrow::borrow),
        //        &options,
        //        Some(cancellable),
        //        move |res| {
        //            send.resolve(res);
        //        },
        //    );
        //}))
    //}

    //#[doc(alias = "nm_client_add_and_activate_connection_async")]
    //pub fn add_and_activate_connection_async<P: FnOnce(Result</*Ignored*/ActiveConnection, glib::Error>) + 'static>(&self, partial: /*Ignored*/Option<&Connection>, device: /*Ignored*/&Device, specific_object: Option<&str>, cancellable: Option<&impl IsA<gio::Cancellable>>, callback: P) {
    //    unsafe { TODO: call ffi:nm_client_add_and_activate_connection_async() }
    //}

    //
    //pub fn add_and_activate_connection_future(&self, partial: /*Ignored*/Option<&Connection>, device: /*Ignored*/&Device, specific_object: Option<&str>) -> Pin<Box_<dyn std::future::Future<Output = Result</*Ignored*/ActiveConnection, glib::Error>> + 'static>> {

        //let partial = partial.map(ToOwned::to_owned);
        //let device = device.clone();
        //let specific_object = specific_object.map(ToOwned::to_owned);
        //Box_::pin(gio::GioFuture::new(self, move |obj, cancellable, send| {
        //    obj.add_and_activate_connection_async(
        //        partial.as_ref().map(::std::borrow::Borrow::borrow),
        //        &device,
        //        specific_object.as_ref().map(::std::borrow::Borrow::borrow),
        //        Some(cancellable),
        //        move |res| {
        //            send.resolve(res);
        //        },
        //    );
        //}))
    //}

    //#[cfg(any(feature = "v1_20", feature = "dox"))]
    //#[cfg_attr(feature = "dox", doc(cfg(feature = "v1_20")))]
    //#[doc(alias = "nm_client_add_connection2")]
    //pub fn add_connection2<P: FnOnce(Result<(/*Ignored*/RemoteConnection, glib::Variant), glib::Error>) + 'static>(&self, settings: &glib::Variant, flags: /*Ignored*/SettingsAddConnection2Flags, args: Option<&glib::Variant>, ignore_out_result: bool, cancellable: Option<&impl IsA<gio::Cancellable>>, callback: P) {
    //    unsafe { TODO: call ffi:nm_client_add_connection2() }
    //}

    //
    //#[cfg(any(feature = "v1_20", feature = "dox"))]
    //#[cfg_attr(feature = "dox", doc(cfg(feature = "v1_20")))]
    //pub fn add_connection2_future(&self, settings: &glib::Variant, flags: /*Ignored*/SettingsAddConnection2Flags, args: Option<&glib::Variant>, ignore_out_result: bool) -> Pin<Box_<dyn std::future::Future<Output = Result<(/*Ignored*/RemoteConnection, glib::Variant), glib::Error>> + 'static>> {

        //let settings = settings.clone();
        //let args = args.map(ToOwned::to_owned);
        //Box_::pin(gio::GioFuture::new(self, move |obj, cancellable, send| {
        //    obj.add_connection2(
        //        &settings,
        //        flags,
        //        args.as_ref().map(::std::borrow::Borrow::borrow),
        //        ignore_out_result,
        //        Some(cancellable),
        //        move |res| {
        //            send.resolve(res);
        //        },
        //    );
        //}))
    //}

    //#[doc(alias = "nm_client_add_connection_async")]
    //pub fn add_connection_async<P: FnOnce(Result</*Ignored*/RemoteConnection, glib::Error>) + 'static>(&self, connection: /*Ignored*/&Connection, save_to_disk: bool, cancellable: Option<&impl IsA<gio::Cancellable>>, callback: P) {
    //    unsafe { TODO: call ffi:nm_client_add_connection_async() }
    //}

    //
    //pub fn add_connection_future(&self, connection: /*Ignored*/&Connection, save_to_disk: bool) -> Pin<Box_<dyn std::future::Future<Output = Result</*Ignored*/RemoteConnection, glib::Error>> + 'static>> {

        //let connection = connection.clone();
        //Box_::pin(gio::GioFuture::new(self, move |obj, cancellable, send| {
        //    obj.add_connection_async(
        //        &connection,
        //        save_to_disk,
        //        Some(cancellable),
        //        move |res| {
        //            send.resolve(res);
        //        },
        //    );
        //}))
    //}

    //#[cfg_attr(feature = "v1_22", deprecated = "Since 1.22")]
    //#[doc(alias = "nm_client_check_connectivity")]
    //pub fn check_connectivity(&self, cancellable: Option<&impl IsA<gio::Cancellable>>) -> Result</*Ignored*/ConnectivityState, glib::Error> {
    //    unsafe { TODO: call ffi:nm_client_check_connectivity() }
    //}

    //#[doc(alias = "nm_client_check_connectivity_async")]
    //pub fn check_connectivity_async<P: FnOnce(Result</*Ignored*/ConnectivityState, glib::Error>) + 'static>(&self, cancellable: Option<&impl IsA<gio::Cancellable>>, callback: P) {
    //    unsafe { TODO: call ffi:nm_client_check_connectivity_async() }
    //}

    //
    //pub fn check_connectivity_future(&self) -> Pin<Box_<dyn std::future::Future<Output = Result</*Ignored*/ConnectivityState, glib::Error>> + 'static>> {

        //Box_::pin(gio::GioFuture::new(self, move |obj, cancellable, send| {
        //    obj.check_connectivity_async(
        //        Some(cancellable),
        //        move |res| {
        //            send.resolve(res);
        //        },
        //    );
        //}))
    //}

    #[cfg(any(feature = "v1_12", feature = "dox"))]
    #[cfg_attr(feature = "dox", doc(cfg(feature = "v1_12")))]
    #[doc(alias = "nm_client_checkpoint_adjust_rollback_timeout")]
    pub fn checkpoint_adjust_rollback_timeout<P: FnOnce(Result<(), glib::Error>) + 'static>(&self, checkpoint_path: &str, add_timeout: u32, cancellable: Option<&impl IsA<gio::Cancellable>>, callback: P) {
        
                let main_context = glib::MainContext::ref_thread_default();
                let is_main_context_owner = main_context.is_owner();
                let has_acquired_main_context = (!is_main_context_owner)
                    .then(|| main_context.acquire().ok())
                    .flatten();
                assert!(
                    is_main_context_owner || has_acquired_main_context.is_some(),
                    "Async operations only allowed if the thread is owning the MainContext"
                );
        
        let user_data: Box_<glib::thread_guard::ThreadGuard<P>> = Box_::new(glib::thread_guard::ThreadGuard::new(callback));
        unsafe extern "C" fn checkpoint_adjust_rollback_timeout_trampoline<P: FnOnce(Result<(), glib::Error>) + 'static>(_source_object: *mut glib::gobject_ffi::GObject, res: *mut gio::ffi::GAsyncResult, user_data: glib::ffi::gpointer) {
            let mut error = ptr::null_mut();
            let _ = ffi::nm_client_checkpoint_adjust_rollback_timeout_finish(_source_object as *mut _, res, &mut error);
            let result = if error.is_null() { Ok(()) } else { Err(from_glib_full(error)) };
            let callback: Box_<glib::thread_guard::ThreadGuard<P>> = Box_::from_raw(user_data as *mut _);
            let callback: P = callback.into_inner();
            callback(result);
        }
        let callback = checkpoint_adjust_rollback_timeout_trampoline::<P>;
        unsafe {
            ffi::nm_client_checkpoint_adjust_rollback_timeout(self.to_glib_none().0, checkpoint_path.to_glib_none().0, add_timeout, cancellable.map(|p| p.as_ref()).to_glib_none().0, Some(callback), Box_::into_raw(user_data) as *mut _);
        }
    }

    
    #[cfg(any(feature = "v1_12", feature = "dox"))]
    #[cfg_attr(feature = "dox", doc(cfg(feature = "v1_12")))]
    pub fn checkpoint_adjust_rollback_timeout_future(&self, checkpoint_path: &str, add_timeout: u32) -> Pin<Box_<dyn std::future::Future<Output = Result<(), glib::Error>> + 'static>> {

        let checkpoint_path = String::from(checkpoint_path);
        Box_::pin(gio::GioFuture::new(self, move |obj, cancellable, send| {
            obj.checkpoint_adjust_rollback_timeout(
                &checkpoint_path,
                add_timeout,
                Some(cancellable),
                move |res| {
                    send.resolve(res);
                },
            );
        }))
    }

    //#[cfg(any(feature = "v1_12", feature = "dox"))]
    //#[cfg_attr(feature = "dox", doc(cfg(feature = "v1_12")))]
    //#[doc(alias = "nm_client_checkpoint_create")]
    //pub fn checkpoint_create<P: FnOnce(Result</*Ignored*/Checkpoint, glib::Error>) + 'static>(&self, devices: /*Ignored*/&[Device], rollback_timeout: u32, flags: /*Ignored*/CheckpointCreateFlags, cancellable: Option<&impl IsA<gio::Cancellable>>, callback: P) {
    //    unsafe { TODO: call ffi:nm_client_checkpoint_create() }
    //}

    //
    //#[cfg(any(feature = "v1_12", feature = "dox"))]
    //#[cfg_attr(feature = "dox", doc(cfg(feature = "v1_12")))]
    //pub fn checkpoint_create_future(&self, devices: /*Ignored*/&[Device], rollback_timeout: u32, flags: /*Ignored*/CheckpointCreateFlags) -> Pin<Box_<dyn std::future::Future<Output = Result</*Ignored*/Checkpoint, glib::Error>> + 'static>> {

        //let devices = devices.clone();
        //Box_::pin(gio::GioFuture::new(self, move |obj, cancellable, send| {
        //    obj.checkpoint_create(
        //        &devices,
        //        rollback_timeout,
        //        flags,
        //        Some(cancellable),
        //        move |res| {
        //            send.resolve(res);
        //        },
        //    );
        //}))
    //}

    #[cfg(any(feature = "v1_12", feature = "dox"))]
    #[cfg_attr(feature = "dox", doc(cfg(feature = "v1_12")))]
    #[doc(alias = "nm_client_checkpoint_destroy")]
    pub fn checkpoint_destroy<P: FnOnce(Result<(), glib::Error>) + 'static>(&self, checkpoint_path: &str, cancellable: Option<&impl IsA<gio::Cancellable>>, callback: P) {
        
                let main_context = glib::MainContext::ref_thread_default();
                let is_main_context_owner = main_context.is_owner();
                let has_acquired_main_context = (!is_main_context_owner)
                    .then(|| main_context.acquire().ok())
                    .flatten();
                assert!(
                    is_main_context_owner || has_acquired_main_context.is_some(),
                    "Async operations only allowed if the thread is owning the MainContext"
                );
        
        let user_data: Box_<glib::thread_guard::ThreadGuard<P>> = Box_::new(glib::thread_guard::ThreadGuard::new(callback));
        unsafe extern "C" fn checkpoint_destroy_trampoline<P: FnOnce(Result<(), glib::Error>) + 'static>(_source_object: *mut glib::gobject_ffi::GObject, res: *mut gio::ffi::GAsyncResult, user_data: glib::ffi::gpointer) {
            let mut error = ptr::null_mut();
            let _ = ffi::nm_client_checkpoint_destroy_finish(_source_object as *mut _, res, &mut error);
            let result = if error.is_null() { Ok(()) } else { Err(from_glib_full(error)) };
            let callback: Box_<glib::thread_guard::ThreadGuard<P>> = Box_::from_raw(user_data as *mut _);
            let callback: P = callback.into_inner();
            callback(result);
        }
        let callback = checkpoint_destroy_trampoline::<P>;
        unsafe {
            ffi::nm_client_checkpoint_destroy(self.to_glib_none().0, checkpoint_path.to_glib_none().0, cancellable.map(|p| p.as_ref()).to_glib_none().0, Some(callback), Box_::into_raw(user_data) as *mut _);
        }
    }

    
    #[cfg(any(feature = "v1_12", feature = "dox"))]
    #[cfg_attr(feature = "dox", doc(cfg(feature = "v1_12")))]
    pub fn checkpoint_destroy_future(&self, checkpoint_path: &str) -> Pin<Box_<dyn std::future::Future<Output = Result<(), glib::Error>> + 'static>> {

        let checkpoint_path = String::from(checkpoint_path);
        Box_::pin(gio::GioFuture::new(self, move |obj, cancellable, send| {
            obj.checkpoint_destroy(
                &checkpoint_path,
                Some(cancellable),
                move |res| {
                    send.resolve(res);
                },
            );
        }))
    }

    //#[cfg(any(feature = "v1_12", feature = "dox"))]
    //#[cfg_attr(feature = "dox", doc(cfg(feature = "v1_12")))]
    //#[doc(alias = "nm_client_checkpoint_rollback")]
    //pub fn checkpoint_rollback<P: FnOnce(Result</*Unimplemented*/HashTable TypeId { ns_id: 0, id: 28 }/TypeId { ns_id: 0, id: 7 }, glib::Error>) + 'static>(&self, checkpoint_path: &str, cancellable: Option<&impl IsA<gio::Cancellable>>, callback: P) {
    //    unsafe { TODO: call ffi:nm_client_checkpoint_rollback() }
    //}

    //
    //#[cfg(any(feature = "v1_12", feature = "dox"))]
    //#[cfg_attr(feature = "dox", doc(cfg(feature = "v1_12")))]
    //pub fn checkpoint_rollback_future(&self, checkpoint_path: &str) -> Pin<Box_<dyn std::future::Future<Output = Result</*Unimplemented*/HashTable TypeId { ns_id: 0, id: 28 }/TypeId { ns_id: 0, id: 7 }, glib::Error>> + 'static>> {

        //let checkpoint_path = String::from(checkpoint_path);
        //Box_::pin(gio::GioFuture::new(self, move |obj, cancellable, send| {
        //    obj.checkpoint_rollback(
        //        &checkpoint_path,
        //        Some(cancellable),
        //        move |res| {
        //            send.resolve(res);
        //        },
        //    );
        //}))
    //}

    #[cfg(any(feature = "v1_10", feature = "dox"))]
    #[cfg_attr(feature = "dox", doc(cfg(feature = "v1_10")))]
    #[doc(alias = "nm_client_connectivity_check_get_available")]
    pub fn connectivity_check_get_available(&self) -> bool {
        unsafe {
            from_glib(ffi::nm_client_connectivity_check_get_available(self.to_glib_none().0))
        }
    }

    #[cfg(any(feature = "v1_10", feature = "dox"))]
    #[cfg_attr(feature = "dox", doc(cfg(feature = "v1_10")))]
    #[doc(alias = "nm_client_connectivity_check_get_enabled")]
    pub fn connectivity_check_get_enabled(&self) -> bool {
        unsafe {
            from_glib(ffi::nm_client_connectivity_check_get_enabled(self.to_glib_none().0))
        }
    }

    #[cfg(any(feature = "v1_20", feature = "dox"))]
    #[cfg_attr(feature = "dox", doc(cfg(feature = "v1_20")))]
    #[doc(alias = "nm_client_connectivity_check_get_uri")]
    pub fn connectivity_check_get_uri(&self) -> glib::GString {
        unsafe {
            from_glib_none(ffi::nm_client_connectivity_check_get_uri(self.to_glib_none().0))
        }
    }

    #[cfg_attr(feature = "v1_22", deprecated = "Since 1.22")]
    #[cfg(any(feature = "v1_10", feature = "dox"))]
    #[cfg_attr(feature = "dox", doc(cfg(feature = "v1_10")))]
    #[doc(alias = "nm_client_connectivity_check_set_enabled")]
    pub fn connectivity_check_set_enabled(&self, enabled: bool) {
        unsafe {
            ffi::nm_client_connectivity_check_set_enabled(self.to_glib_none().0, enabled.into_glib());
        }
    }

    //#[cfg(any(feature = "v1_24", feature = "dox"))]
    //#[cfg_attr(feature = "dox", doc(cfg(feature = "v1_24")))]
    //#[doc(alias = "nm_client_dbus_call")]
    //pub fn dbus_call<P: FnOnce(Result<glib::Variant, glib::Error>) + 'static>(&self, object_path: &str, interface_name: &str, method_name: &str, parameters: Option<&glib::Variant>, reply_type: /*Ignored*/Option<&glib::VariantTy>, timeout_msec: i32, cancellable: Option<&impl IsA<gio::Cancellable>>, callback: P) {
    //    unsafe { TODO: call ffi:nm_client_dbus_call() }
    //}

    //
    //#[cfg(any(feature = "v1_24", feature = "dox"))]
    //#[cfg_attr(feature = "dox", doc(cfg(feature = "v1_24")))]
    //pub fn dbus_call_future(&self, object_path: &str, interface_name: &str, method_name: &str, parameters: Option<&glib::Variant>, reply_type: /*Ignored*/Option<&glib::VariantTy>, timeout_msec: i32) -> Pin<Box_<dyn std::future::Future<Output = Result<glib::Variant, glib::Error>> + 'static>> {

        //let object_path = String::from(object_path);
        //let interface_name = String::from(interface_name);
        //let method_name = String::from(method_name);
        //let parameters = parameters.map(ToOwned::to_owned);
        //let reply_type = reply_type.map(ToOwned::to_owned);
        //Box_::pin(gio::GioFuture::new(self, move |obj, cancellable, send| {
        //    obj.dbus_call(
        //        &object_path,
        //        &interface_name,
        //        &method_name,
        //        parameters.as_ref().map(::std::borrow::Borrow::borrow),
        //        reply_type.as_ref().map(::std::borrow::Borrow::borrow),
        //        timeout_msec,
        //        Some(cancellable),
        //        move |res| {
        //            send.resolve(res);
        //        },
        //    );
        //}))
    //}

    #[cfg(any(feature = "v1_24", feature = "dox"))]
    #[cfg_attr(feature = "dox", doc(cfg(feature = "v1_24")))]
    #[doc(alias = "nm_client_dbus_set_property")]
    pub fn dbus_set_property<P: FnOnce(Result<(), glib::Error>) + 'static>(&self, object_path: &str, interface_name: &str, property_name: &str, value: &glib::Variant, timeout_msec: i32, cancellable: Option<&impl IsA<gio::Cancellable>>, callback: P) {
        
                let main_context = glib::MainContext::ref_thread_default();
                let is_main_context_owner = main_context.is_owner();
                let has_acquired_main_context = (!is_main_context_owner)
                    .then(|| main_context.acquire().ok())
                    .flatten();
                assert!(
                    is_main_context_owner || has_acquired_main_context.is_some(),
                    "Async operations only allowed if the thread is owning the MainContext"
                );
        
        let user_data: Box_<glib::thread_guard::ThreadGuard<P>> = Box_::new(glib::thread_guard::ThreadGuard::new(callback));
        unsafe extern "C" fn dbus_set_property_trampoline<P: FnOnce(Result<(), glib::Error>) + 'static>(_source_object: *mut glib::gobject_ffi::GObject, res: *mut gio::ffi::GAsyncResult, user_data: glib::ffi::gpointer) {
            let mut error = ptr::null_mut();
            let _ = ffi::nm_client_dbus_set_property_finish(_source_object as *mut _, res, &mut error);
            let result = if error.is_null() { Ok(()) } else { Err(from_glib_full(error)) };
            let callback: Box_<glib::thread_guard::ThreadGuard<P>> = Box_::from_raw(user_data as *mut _);
            let callback: P = callback.into_inner();
            callback(result);
        }
        let callback = dbus_set_property_trampoline::<P>;
        unsafe {
            ffi::nm_client_dbus_set_property(self.to_glib_none().0, object_path.to_glib_none().0, interface_name.to_glib_none().0, property_name.to_glib_none().0, value.to_glib_none().0, timeout_msec, cancellable.map(|p| p.as_ref()).to_glib_none().0, Some(callback), Box_::into_raw(user_data) as *mut _);
        }
    }

    
    #[cfg(any(feature = "v1_24", feature = "dox"))]
    #[cfg_attr(feature = "dox", doc(cfg(feature = "v1_24")))]
    pub fn dbus_set_property_future(&self, object_path: &str, interface_name: &str, property_name: &str, value: &glib::Variant, timeout_msec: i32) -> Pin<Box_<dyn std::future::Future<Output = Result<(), glib::Error>> + 'static>> {

        let object_path = String::from(object_path);
        let interface_name = String::from(interface_name);
        let property_name = String::from(property_name);
        let value = value.clone();
        Box_::pin(gio::GioFuture::new(self, move |obj, cancellable, send| {
            obj.dbus_set_property(
                &object_path,
                &interface_name,
                &property_name,
                &value,
                timeout_msec,
                Some(cancellable),
                move |res| {
                    send.resolve(res);
                },
            );
        }))
    }

    //#[cfg_attr(feature = "v1_22", deprecated = "Since 1.22")]
    //#[doc(alias = "nm_client_deactivate_connection")]
    //pub fn deactivate_connection(&self, active: /*Ignored*/&ActiveConnection, cancellable: Option<&impl IsA<gio::Cancellable>>) -> Result<(), glib::Error> {
    //    unsafe { TODO: call ffi:nm_client_deactivate_connection() }
    //}

    //#[doc(alias = "nm_client_deactivate_connection_async")]
    //pub fn deactivate_connection_async<P: FnOnce(Result<(), glib::Error>) + 'static>(&self, active: /*Ignored*/&ActiveConnection, cancellable: Option<&impl IsA<gio::Cancellable>>, callback: P) {
    //    unsafe { TODO: call ffi:nm_client_deactivate_connection_async() }
    //}

    //
    //pub fn deactivate_connection_future(&self, active: /*Ignored*/&ActiveConnection) -> Pin<Box_<dyn std::future::Future<Output = Result<(), glib::Error>> + 'static>> {

        //let active = active.clone();
        //Box_::pin(gio::GioFuture::new(self, move |obj, cancellable, send| {
        //    obj.deactivate_connection_async(
        //        &active,
        //        Some(cancellable),
        //        move |res| {
        //            send.resolve(res);
        //        },
        //    );
        //}))
    //}

    //#[doc(alias = "nm_client_get_activating_connection")]
    //#[doc(alias = "get_activating_connection")]
    //pub fn activating_connection(&self) -> /*Ignored*/ActiveConnection {
    //    unsafe { TODO: call ffi:nm_client_get_activating_connection() }
    //}

    //#[doc(alias = "nm_client_get_active_connections")]
    //#[doc(alias = "get_active_connections")]
    //pub fn active_connections(&self) -> /*Ignored*/Vec<ActiveConnection> {
    //    unsafe { TODO: call ffi:nm_client_get_active_connections() }
    //}

    //#[cfg(any(feature = "v1_2", feature = "dox"))]
    //#[cfg_attr(feature = "dox", doc(cfg(feature = "v1_2")))]
    //#[doc(alias = "nm_client_get_all_devices")]
    //#[doc(alias = "get_all_devices")]
    //pub fn all_devices(&self) -> /*Ignored*/Vec<Device> {
    //    unsafe { TODO: call ffi:nm_client_get_all_devices() }
    //}

    #[cfg(any(feature = "v1_24", feature = "dox"))]
    #[cfg_attr(feature = "dox", doc(cfg(feature = "v1_24")))]
    #[doc(alias = "nm_client_get_capabilities")]
    #[doc(alias = "get_capabilities")]
    pub fn capabilities(&self) -> Vec<u32> {
        unsafe {
            let mut length = mem::MaybeUninit::uninit();
            let ret = FromGlibContainer::from_glib_none_num(ffi::nm_client_get_capabilities(self.to_glib_none().0, length.as_mut_ptr()), length.assume_init() as usize);
            ret
        }
    }

    //#[cfg(any(feature = "v1_12", feature = "dox"))]
    //#[cfg_attr(feature = "dox", doc(cfg(feature = "v1_12")))]
    //#[doc(alias = "nm_client_get_checkpoints")]
    //#[doc(alias = "get_checkpoints")]
    //pub fn checkpoints(&self) -> /*Ignored*/Vec<Checkpoint> {
    //    unsafe { TODO: call ffi:nm_client_get_checkpoints() }
    //}

    //#[doc(alias = "nm_client_get_connection_by_id")]
    //#[doc(alias = "get_connection_by_id")]
    //pub fn connection_by_id(&self, id: &str) -> /*Ignored*/RemoteConnection {
    //    unsafe { TODO: call ffi:nm_client_get_connection_by_id() }
    //}

    //#[doc(alias = "nm_client_get_connection_by_path")]
    //#[doc(alias = "get_connection_by_path")]
    //pub fn connection_by_path(&self, path: &str) -> /*Ignored*/RemoteConnection {
    //    unsafe { TODO: call ffi:nm_client_get_connection_by_path() }
    //}

    //#[doc(alias = "nm_client_get_connection_by_uuid")]
    //#[doc(alias = "get_connection_by_uuid")]
    //pub fn connection_by_uuid(&self, uuid: &str) -> /*Ignored*/RemoteConnection {
    //    unsafe { TODO: call ffi:nm_client_get_connection_by_uuid() }
    //}

    //#[doc(alias = "nm_client_get_connections")]
    //#[doc(alias = "get_connections")]
    //pub fn connections(&self) -> /*Ignored*/Vec<RemoteConnection> {
    //    unsafe { TODO: call ffi:nm_client_get_connections() }
    //}

    //#[doc(alias = "nm_client_get_connectivity")]
    //#[doc(alias = "get_connectivity")]
    //pub fn connectivity(&self) -> /*Ignored*/ConnectivityState {
    //    unsafe { TODO: call ffi:nm_client_get_connectivity() }
    //}

    //#[cfg(any(feature = "v1_22", feature = "dox"))]
    //#[cfg_attr(feature = "dox", doc(cfg(feature = "v1_22")))]
    //#[doc(alias = "nm_client_get_context_busy_watcher")]
    //#[doc(alias = "get_context_busy_watcher")]
    //pub fn context_busy_watcher(&self) -> /*Ignored*/glib::Object {
    //    unsafe { TODO: call ffi:nm_client_get_context_busy_watcher() }
    //}

    //#[cfg(any(feature = "v1_22", feature = "dox"))]
    //#[cfg_attr(feature = "dox", doc(cfg(feature = "v1_22")))]
    //#[doc(alias = "nm_client_get_dbus_connection")]
    //#[doc(alias = "get_dbus_connection")]
    //pub fn dbus_connection(&self) -> /*Ignored*/gio::DBusConnection {
    //    unsafe { TODO: call ffi:nm_client_get_dbus_connection() }
    //}

    #[cfg(any(feature = "v1_22", feature = "dox"))]
    #[cfg_attr(feature = "dox", doc(cfg(feature = "v1_22")))]
    #[doc(alias = "nm_client_get_dbus_name_owner")]
    #[doc(alias = "get_dbus_name_owner")]
    pub fn dbus_name_owner(&self) -> glib::GString {
        unsafe {
            from_glib_none(ffi::nm_client_get_dbus_name_owner(self.to_glib_none().0))
        }
    }

    //#[doc(alias = "nm_client_get_device_by_iface")]
    //#[doc(alias = "get_device_by_iface")]
    //pub fn device_by_iface(&self, iface: &str) -> /*Ignored*/Device {
    //    unsafe { TODO: call ffi:nm_client_get_device_by_iface() }
    //}

    //#[doc(alias = "nm_client_get_device_by_path")]
    //#[doc(alias = "get_device_by_path")]
    //pub fn device_by_path(&self, object_path: &str) -> /*Ignored*/Device {
    //    unsafe { TODO: call ffi:nm_client_get_device_by_path() }
    //}

    //#[doc(alias = "nm_client_get_devices")]
    //#[doc(alias = "get_devices")]
    //pub fn devices(&self) -> /*Ignored*/Vec<Device> {
    //    unsafe { TODO: call ffi:nm_client_get_devices() }
    //}

    //#[cfg(any(feature = "v1_6", feature = "dox"))]
    //#[cfg_attr(feature = "dox", doc(cfg(feature = "v1_6")))]
    //#[doc(alias = "nm_client_get_dns_configuration")]
    //#[doc(alias = "get_dns_configuration")]
    //pub fn dns_configuration(&self) -> /*Ignored*/Vec<DnsEntry> {
    //    unsafe { TODO: call ffi:nm_client_get_dns_configuration() }
    //}

    #[cfg(any(feature = "v1_6", feature = "dox"))]
    #[cfg_attr(feature = "dox", doc(cfg(feature = "v1_6")))]
    #[doc(alias = "nm_client_get_dns_mode")]
    #[doc(alias = "get_dns_mode")]
    pub fn dns_mode(&self) -> glib::GString {
        unsafe {
            from_glib_none(ffi::nm_client_get_dns_mode(self.to_glib_none().0))
        }
    }

    #[cfg(any(feature = "v1_6", feature = "dox"))]
    #[cfg_attr(feature = "dox", doc(cfg(feature = "v1_6")))]
    #[doc(alias = "nm_client_get_dns_rc_manager")]
    #[doc(alias = "get_dns_rc_manager")]
    pub fn dns_rc_manager(&self) -> glib::GString {
        unsafe {
            from_glib_none(ffi::nm_client_get_dns_rc_manager(self.to_glib_none().0))
        }
    }

    //#[cfg(any(feature = "v1_24", feature = "dox"))]
    //#[cfg_attr(feature = "dox", doc(cfg(feature = "v1_24")))]
    //#[doc(alias = "nm_client_get_instance_flags")]
    //#[doc(alias = "get_instance_flags")]
    //pub fn instance_flags(&self) -> /*Ignored*/ClientInstanceFlags {
    //    unsafe { TODO: call ffi:nm_client_get_instance_flags() }
    //}

    #[cfg_attr(feature = "v1_22", deprecated = "Since 1.22")]
    #[doc(alias = "nm_client_get_logging")]
    #[doc(alias = "get_logging")]
    pub fn logging(&self, level: Option<&str>, domains: Option<&str>) -> Result<(), glib::Error> {
        unsafe {
            let mut error = ptr::null_mut();
            let is_ok = ffi::nm_client_get_logging(self.to_glib_none().0, level.to_glib_none().0, domains.to_glib_none().0, &mut error);
            assert_eq!(is_ok == glib::ffi::GFALSE, !error.is_null());
            if error.is_null() { Ok(()) } else { Err(from_glib_full(error)) }
        }
    }

    //#[cfg(any(feature = "v1_22", feature = "dox"))]
    //#[cfg_attr(feature = "dox", doc(cfg(feature = "v1_22")))]
    //#[doc(alias = "nm_client_get_main_context")]
    //#[doc(alias = "get_main_context")]
    //pub fn main_context(&self) -> /*Ignored*/glib::MainContext {
    //    unsafe { TODO: call ffi:nm_client_get_main_context() }
    //}

    //#[cfg(any(feature = "v1_22", feature = "dox"))]
    //#[cfg_attr(feature = "dox", doc(cfg(feature = "v1_22")))]
    //#[doc(alias = "nm_client_get_metered")]
    //#[doc(alias = "get_metered")]
    //pub fn metered(&self) -> /*Ignored*/Metered {
    //    unsafe { TODO: call ffi:nm_client_get_metered() }
    //}

    #[doc(alias = "nm_client_get_nm_running")]
    #[doc(alias = "get_nm_running")]
    pub fn is_nm_running(&self) -> bool {
        unsafe {
            from_glib(ffi::nm_client_get_nm_running(self.to_glib_none().0))
        }
    }

    //#[cfg(any(feature = "v1_24", feature = "dox"))]
    //#[cfg_attr(feature = "dox", doc(cfg(feature = "v1_24")))]
    //#[doc(alias = "nm_client_get_object_by_path")]
    //#[doc(alias = "get_object_by_path")]
    //pub fn object_by_path(&self, dbus_path: &str) -> /*Ignored*/Object {
    //    unsafe { TODO: call ffi:nm_client_get_object_by_path() }
    //}

    //#[doc(alias = "nm_client_get_permission_result")]
    //#[doc(alias = "get_permission_result")]
    //pub fn permission_result(&self, permission: /*Ignored*/ClientPermission) -> /*Ignored*/ClientPermissionResult {
    //    unsafe { TODO: call ffi:nm_client_get_permission_result() }
    //}

    //#[cfg(any(feature = "v1_24", feature = "dox"))]
    //#[cfg_attr(feature = "dox", doc(cfg(feature = "v1_24")))]
    //#[doc(alias = "nm_client_get_permissions_state")]
    //#[doc(alias = "get_permissions_state")]
    //pub fn permissions_state(&self) -> /*Ignored*/Ternary {
    //    unsafe { TODO: call ffi:nm_client_get_permissions_state() }
    //}

    //#[doc(alias = "nm_client_get_primary_connection")]
    //#[doc(alias = "get_primary_connection")]
    //pub fn primary_connection(&self) -> /*Ignored*/ActiveConnection {
    //    unsafe { TODO: call ffi:nm_client_get_primary_connection() }
    //}

    #[doc(alias = "nm_client_get_startup")]
    #[doc(alias = "get_startup")]
    pub fn is_startup(&self) -> bool {
        unsafe {
            from_glib(ffi::nm_client_get_startup(self.to_glib_none().0))
        }
    }

    //#[doc(alias = "nm_client_get_state")]
    //#[doc(alias = "get_state")]
    //pub fn state(&self) -> /*Ignored*/State {
    //    unsafe { TODO: call ffi:nm_client_get_state() }
    //}

    #[doc(alias = "nm_client_get_version")]
    #[doc(alias = "get_version")]
    pub fn version(&self) -> glib::GString {
        unsafe {
            from_glib_none(ffi::nm_client_get_version(self.to_glib_none().0))
        }
    }

    #[cfg_attr(feature = "v1_22", deprecated = "Since 1.22")]
    #[doc(alias = "nm_client_load_connections")]
    pub fn load_connections(&self, filenames: &[&str], cancellable: Option<&impl IsA<gio::Cancellable>>) -> Result<glib::GString, glib::Error> {
        unsafe {
            let mut failures = ptr::null_mut();
            let mut error = ptr::null_mut();
            let is_ok = ffi::nm_client_load_connections(self.to_glib_none().0, filenames.to_glib_none().0, &mut failures, cancellable.map(|p| p.as_ref()).to_glib_none().0, &mut error);
            assert_eq!(is_ok == glib::ffi::GFALSE, !error.is_null());
            if error.is_null() { Ok(from_glib_full(failures)) } else { Err(from_glib_full(error)) }
        }
    }

    #[doc(alias = "nm_client_load_connections_async")]
    pub fn load_connections_async<P: FnOnce(Result<Vec<glib::GString>, glib::Error>) + 'static>(&self, filenames: &[&str], cancellable: Option<&impl IsA<gio::Cancellable>>, callback: P) {
        
                let main_context = glib::MainContext::ref_thread_default();
                let is_main_context_owner = main_context.is_owner();
                let has_acquired_main_context = (!is_main_context_owner)
                    .then(|| main_context.acquire().ok())
                    .flatten();
                assert!(
                    is_main_context_owner || has_acquired_main_context.is_some(),
                    "Async operations only allowed if the thread is owning the MainContext"
                );
        
        let user_data: Box_<glib::thread_guard::ThreadGuard<P>> = Box_::new(glib::thread_guard::ThreadGuard::new(callback));
        unsafe extern "C" fn load_connections_async_trampoline<P: FnOnce(Result<Vec<glib::GString>, glib::Error>) + 'static>(_source_object: *mut glib::gobject_ffi::GObject, res: *mut gio::ffi::GAsyncResult, user_data: glib::ffi::gpointer) {
            let mut error = ptr::null_mut();
            let mut failures = ptr::null_mut();
            let _ = ffi::nm_client_load_connections_finish(_source_object as *mut _, &mut failures, res, &mut error);
            let result = if error.is_null() { Ok(FromGlibPtrContainer::from_glib_full(failures)) } else { Err(from_glib_full(error)) };
            let callback: Box_<glib::thread_guard::ThreadGuard<P>> = Box_::from_raw(user_data as *mut _);
            let callback: P = callback.into_inner();
            callback(result);
        }
        let callback = load_connections_async_trampoline::<P>;
        unsafe {
            ffi::nm_client_load_connections_async(self.to_glib_none().0, filenames.to_glib_none().0, cancellable.map(|p| p.as_ref()).to_glib_none().0, Some(callback), Box_::into_raw(user_data) as *mut _);
        }
    }

    
    pub fn load_connections_future(&self, filenames: &[&str]) -> Pin<Box_<dyn std::future::Future<Output = Result<Vec<glib::GString>, glib::Error>> + 'static>> {

        let filenames = filenames.clone();
        Box_::pin(gio::GioFuture::new(self, move |obj, cancellable, send| {
            obj.load_connections_async(
                &filenames,
                Some(cancellable),
                move |res| {
                    send.resolve(res);
                },
            );
        }))
    }

    #[doc(alias = "nm_client_networking_get_enabled")]
    pub fn networking_get_enabled(&self) -> bool {
        unsafe {
            from_glib(ffi::nm_client_networking_get_enabled(self.to_glib_none().0))
        }
    }

    #[cfg_attr(feature = "v1_22", deprecated = "Since 1.22")]
    #[doc(alias = "nm_client_networking_set_enabled")]
    pub fn networking_set_enabled(&self, enabled: bool) -> Result<(), glib::Error> {
        unsafe {
            let mut error = ptr::null_mut();
            let is_ok = ffi::nm_client_networking_set_enabled(self.to_glib_none().0, enabled.into_glib(), &mut error);
            assert_eq!(is_ok == glib::ffi::GFALSE, !error.is_null());
            if error.is_null() { Ok(()) } else { Err(from_glib_full(error)) }
        }
    }

    //#[cfg(any(feature = "v1_22", feature = "dox"))]
    //#[cfg_attr(feature = "dox", doc(cfg(feature = "v1_22")))]
    //#[doc(alias = "nm_client_reload")]
    //pub fn reload<P: FnOnce(Result<(), glib::Error>) + 'static>(&self, flags: /*Ignored*/ManagerReloadFlags, cancellable: Option<&impl IsA<gio::Cancellable>>, callback: P) {
    //    unsafe { TODO: call ffi:nm_client_reload() }
    //}

    //
    //#[cfg(any(feature = "v1_22", feature = "dox"))]
    //#[cfg_attr(feature = "dox", doc(cfg(feature = "v1_22")))]
    //pub fn reload_future(&self, flags: /*Ignored*/ManagerReloadFlags) -> Pin<Box_<dyn std::future::Future<Output = Result<(), glib::Error>> + 'static>> {

        //Box_::pin(gio::GioFuture::new(self, move |obj, cancellable, send| {
        //    obj.reload(
        //        flags,
        //        Some(cancellable),
        //        move |res| {
        //            send.resolve(res);
        //        },
        //    );
        //}))
    //}

    #[cfg_attr(feature = "v1_22", deprecated = "Since 1.22")]
    #[doc(alias = "nm_client_reload_connections")]
    pub fn reload_connections(&self, cancellable: Option<&impl IsA<gio::Cancellable>>) -> Result<(), glib::Error> {
        unsafe {
            let mut error = ptr::null_mut();
            let is_ok = ffi::nm_client_reload_connections(self.to_glib_none().0, cancellable.map(|p| p.as_ref()).to_glib_none().0, &mut error);
            assert_eq!(is_ok == glib::ffi::GFALSE, !error.is_null());
            if error.is_null() { Ok(()) } else { Err(from_glib_full(error)) }
        }
    }

    #[doc(alias = "nm_client_reload_connections_async")]
    pub fn reload_connections_async<P: FnOnce(Result<(), glib::Error>) + 'static>(&self, cancellable: Option<&impl IsA<gio::Cancellable>>, callback: P) {
        
                let main_context = glib::MainContext::ref_thread_default();
                let is_main_context_owner = main_context.is_owner();
                let has_acquired_main_context = (!is_main_context_owner)
                    .then(|| main_context.acquire().ok())
                    .flatten();
                assert!(
                    is_main_context_owner || has_acquired_main_context.is_some(),
                    "Async operations only allowed if the thread is owning the MainContext"
                );
        
        let user_data: Box_<glib::thread_guard::ThreadGuard<P>> = Box_::new(glib::thread_guard::ThreadGuard::new(callback));
        unsafe extern "C" fn reload_connections_async_trampoline<P: FnOnce(Result<(), glib::Error>) + 'static>(_source_object: *mut glib::gobject_ffi::GObject, res: *mut gio::ffi::GAsyncResult, user_data: glib::ffi::gpointer) {
            let mut error = ptr::null_mut();
            let _ = ffi::nm_client_reload_connections_finish(_source_object as *mut _, res, &mut error);
            let result = if error.is_null() { Ok(()) } else { Err(from_glib_full(error)) };
            let callback: Box_<glib::thread_guard::ThreadGuard<P>> = Box_::from_raw(user_data as *mut _);
            let callback: P = callback.into_inner();
            callback(result);
        }
        let callback = reload_connections_async_trampoline::<P>;
        unsafe {
            ffi::nm_client_reload_connections_async(self.to_glib_none().0, cancellable.map(|p| p.as_ref()).to_glib_none().0, Some(callback), Box_::into_raw(user_data) as *mut _);
        }
    }

    
    pub fn reload_connections_future(&self) -> Pin<Box_<dyn std::future::Future<Output = Result<(), glib::Error>> + 'static>> {

        Box_::pin(gio::GioFuture::new(self, move |obj, cancellable, send| {
            obj.reload_connections_async(
                Some(cancellable),
                move |res| {
                    send.resolve(res);
                },
            );
        }))
    }

    #[cfg_attr(feature = "v1_22", deprecated = "Since 1.22")]
    #[doc(alias = "nm_client_save_hostname")]
    pub fn save_hostname(&self, hostname: Option<&str>, cancellable: Option<&impl IsA<gio::Cancellable>>) -> Result<(), glib::Error> {
        unsafe {
            let mut error = ptr::null_mut();
            let is_ok = ffi::nm_client_save_hostname(self.to_glib_none().0, hostname.to_glib_none().0, cancellable.map(|p| p.as_ref()).to_glib_none().0, &mut error);
            assert_eq!(is_ok == glib::ffi::GFALSE, !error.is_null());
            if error.is_null() { Ok(()) } else { Err(from_glib_full(error)) }
        }
    }

    #[doc(alias = "nm_client_save_hostname_async")]
    pub fn save_hostname_async<P: FnOnce(Result<(), glib::Error>) + 'static>(&self, hostname: Option<&str>, cancellable: Option<&impl IsA<gio::Cancellable>>, callback: P) {
        
                let main_context = glib::MainContext::ref_thread_default();
                let is_main_context_owner = main_context.is_owner();
                let has_acquired_main_context = (!is_main_context_owner)
                    .then(|| main_context.acquire().ok())
                    .flatten();
                assert!(
                    is_main_context_owner || has_acquired_main_context.is_some(),
                    "Async operations only allowed if the thread is owning the MainContext"
                );
        
        let user_data: Box_<glib::thread_guard::ThreadGuard<P>> = Box_::new(glib::thread_guard::ThreadGuard::new(callback));
        unsafe extern "C" fn save_hostname_async_trampoline<P: FnOnce(Result<(), glib::Error>) + 'static>(_source_object: *mut glib::gobject_ffi::GObject, res: *mut gio::ffi::GAsyncResult, user_data: glib::ffi::gpointer) {
            let mut error = ptr::null_mut();
            let _ = ffi::nm_client_save_hostname_finish(_source_object as *mut _, res, &mut error);
            let result = if error.is_null() { Ok(()) } else { Err(from_glib_full(error)) };
            let callback: Box_<glib::thread_guard::ThreadGuard<P>> = Box_::from_raw(user_data as *mut _);
            let callback: P = callback.into_inner();
            callback(result);
        }
        let callback = save_hostname_async_trampoline::<P>;
        unsafe {
            ffi::nm_client_save_hostname_async(self.to_glib_none().0, hostname.to_glib_none().0, cancellable.map(|p| p.as_ref()).to_glib_none().0, Some(callback), Box_::into_raw(user_data) as *mut _);
        }
    }

    
    pub fn save_hostname_future(&self, hostname: Option<&str>) -> Pin<Box_<dyn std::future::Future<Output = Result<(), glib::Error>> + 'static>> {

        let hostname = hostname.map(ToOwned::to_owned);
        Box_::pin(gio::GioFuture::new(self, move |obj, cancellable, send| {
            obj.save_hostname_async(
                hostname.as_ref().map(::std::borrow::Borrow::borrow),
                Some(cancellable),
                move |res| {
                    send.resolve(res);
                },
            );
        }))
    }

    #[cfg_attr(feature = "v1_22", deprecated = "Since 1.22")]
    #[doc(alias = "nm_client_set_logging")]
    pub fn set_logging(&self, level: Option<&str>, domains: Option<&str>) -> Result<(), glib::Error> {
        unsafe {
            let mut error = ptr::null_mut();
            let is_ok = ffi::nm_client_set_logging(self.to_glib_none().0, level.to_glib_none().0, domains.to_glib_none().0, &mut error);
            assert_eq!(is_ok == glib::ffi::GFALSE, !error.is_null());
            if error.is_null() { Ok(()) } else { Err(from_glib_full(error)) }
        }
    }

    #[cfg_attr(feature = "v1_22", deprecated = "Since 1.22")]
    #[doc(alias = "nm_client_wimax_get_enabled")]
    pub fn wimax_get_enabled(&self) -> bool {
        unsafe {
            from_glib(ffi::nm_client_wimax_get_enabled(self.to_glib_none().0))
        }
    }

    #[cfg_attr(feature = "v1_22", deprecated = "Since 1.22")]
    #[doc(alias = "nm_client_wimax_hardware_get_enabled")]
    pub fn wimax_hardware_get_enabled(&self) -> bool {
        unsafe {
            from_glib(ffi::nm_client_wimax_hardware_get_enabled(self.to_glib_none().0))
        }
    }

    #[cfg_attr(feature = "v1_22", deprecated = "Since 1.22")]
    #[doc(alias = "nm_client_wimax_set_enabled")]
    pub fn wimax_set_enabled(&self, enabled: bool) {
        unsafe {
            ffi::nm_client_wimax_set_enabled(self.to_glib_none().0, enabled.into_glib());
        }
    }

    #[doc(alias = "nm_client_wireless_get_enabled")]
    pub fn wireless_get_enabled(&self) -> bool {
        unsafe {
            from_glib(ffi::nm_client_wireless_get_enabled(self.to_glib_none().0))
        }
    }

    #[doc(alias = "nm_client_wireless_hardware_get_enabled")]
    pub fn wireless_hardware_get_enabled(&self) -> bool {
        unsafe {
            from_glib(ffi::nm_client_wireless_hardware_get_enabled(self.to_glib_none().0))
        }
    }

    #[cfg_attr(feature = "v1_22", deprecated = "Since 1.22")]
    #[doc(alias = "nm_client_wireless_set_enabled")]
    pub fn wireless_set_enabled(&self, enabled: bool) {
        unsafe {
            ffi::nm_client_wireless_set_enabled(self.to_glib_none().0, enabled.into_glib());
        }
    }

    #[doc(alias = "nm_client_wwan_get_enabled")]
    pub fn wwan_get_enabled(&self) -> bool {
        unsafe {
            from_glib(ffi::nm_client_wwan_get_enabled(self.to_glib_none().0))
        }
    }

    #[doc(alias = "nm_client_wwan_hardware_get_enabled")]
    pub fn wwan_hardware_get_enabled(&self) -> bool {
        unsafe {
            from_glib(ffi::nm_client_wwan_hardware_get_enabled(self.to_glib_none().0))
        }
    }

    #[cfg_attr(feature = "v1_22", deprecated = "Since 1.22")]
    #[doc(alias = "nm_client_wwan_set_enabled")]
    pub fn wwan_set_enabled(&self, enabled: bool) {
        unsafe {
            ffi::nm_client_wwan_set_enabled(self.to_glib_none().0, enabled.into_glib());
        }
    }

    #[doc(alias = "can-modify")]
    pub fn can_modify(&self) -> bool {
        glib::ObjectExt::property(self, "can-modify")
    }

    #[doc(alias = "connectivity-check-available")]
    pub fn is_connectivity_check_available(&self) -> bool {
        glib::ObjectExt::property(self, "connectivity-check-available")
    }

    #[doc(alias = "connectivity-check-enabled")]
    pub fn is_connectivity_check_enabled(&self) -> bool {
        glib::ObjectExt::property(self, "connectivity-check-enabled")
    }

    #[doc(alias = "connectivity-check-enabled")]
    pub fn set_connectivity_check_enabled(&self, connectivity_check_enabled: bool) {
        glib::ObjectExt::set_property(self,"connectivity-check-enabled", &connectivity_check_enabled)
    }

    #[cfg(any(feature = "v1_22", feature = "dox"))]
    #[cfg_attr(feature = "dox", doc(cfg(feature = "v1_22")))]
    #[doc(alias = "connectivity-check-uri")]
    pub fn connectivity_check_uri(&self) -> Option<glib::GString> {
        glib::ObjectExt::property(self, "connectivity-check-uri")
    }

    pub fn hostname(&self) -> Option<glib::GString> {
        glib::ObjectExt::property(self, "hostname")
    }

    #[cfg(any(feature = "v1_24", feature = "dox"))]
    #[cfg_attr(feature = "dox", doc(cfg(feature = "v1_24")))]
    #[doc(alias = "instance-flags")]
    pub fn set_instance_flags(&self, instance_flags: u32) {
        glib::ObjectExt::set_property(self,"instance-flags", &instance_flags)
    }

    #[cfg(any(feature = "v1_2", feature = "dox"))]
    #[cfg_attr(feature = "dox", doc(cfg(feature = "v1_2")))]
    pub fn get_property_metered(&self) -> u32 {
        glib::ObjectExt::property(self, "metered")
    }

    #[doc(alias = "networking-enabled")]
    pub fn is_networking_enabled(&self) -> bool {
        glib::ObjectExt::property(self, "networking-enabled")
    }

    #[doc(alias = "networking-enabled")]
    pub fn set_networking_enabled(&self, networking_enabled: bool) {
        glib::ObjectExt::set_property(self,"networking-enabled", &networking_enabled)
    }

    #[cfg_attr(feature = "v1_22", deprecated = "Since 1.22")]
    #[doc(alias = "wimax-enabled")]
    pub fn is_wimax_enabled(&self) -> bool {
        glib::ObjectExt::property(self, "wimax-enabled")
    }

    #[cfg_attr(feature = "v1_22", deprecated = "Since 1.22")]
    #[doc(alias = "wimax-enabled")]
    pub fn set_wimax_enabled(&self, wimax_enabled: bool) {
        glib::ObjectExt::set_property(self,"wimax-enabled", &wimax_enabled)
    }

    #[cfg_attr(feature = "v1_22", deprecated = "Since 1.22")]
    #[doc(alias = "wimax-hardware-enabled")]
    pub fn is_wimax_hardware_enabled(&self) -> bool {
        glib::ObjectExt::property(self, "wimax-hardware-enabled")
    }

    #[doc(alias = "wireless-enabled")]
    pub fn is_wireless_enabled(&self) -> bool {
        glib::ObjectExt::property(self, "wireless-enabled")
    }

    #[doc(alias = "wireless-enabled")]
    pub fn set_wireless_enabled(&self, wireless_enabled: bool) {
        glib::ObjectExt::set_property(self,"wireless-enabled", &wireless_enabled)
    }

    #[doc(alias = "wireless-hardware-enabled")]
    pub fn is_wireless_hardware_enabled(&self) -> bool {
        glib::ObjectExt::property(self, "wireless-hardware-enabled")
    }

    #[doc(alias = "wwan-enabled")]
    pub fn is_wwan_enabled(&self) -> bool {
        glib::ObjectExt::property(self, "wwan-enabled")
    }

    #[doc(alias = "wwan-enabled")]
    pub fn set_wwan_enabled(&self, wwan_enabled: bool) {
        glib::ObjectExt::set_property(self,"wwan-enabled", &wwan_enabled)
    }

    #[doc(alias = "wwan-hardware-enabled")]
    pub fn is_wwan_hardware_enabled(&self) -> bool {
        glib::ObjectExt::property(self, "wwan-hardware-enabled")
    }

    #[doc(alias = "nm_client_new_async")]
    pub fn new_async<P: FnOnce(Result<Client, glib::Error>) + 'static>(cancellable: Option<&impl IsA<gio::Cancellable>>, callback: P) {
        
                let main_context = glib::MainContext::ref_thread_default();
                let is_main_context_owner = main_context.is_owner();
                let has_acquired_main_context = (!is_main_context_owner)
                    .then(|| main_context.acquire().ok())
                    .flatten();
                assert!(
                    is_main_context_owner || has_acquired_main_context.is_some(),
                    "Async operations only allowed if the thread is owning the MainContext"
                );
        
        let user_data: Box_<glib::thread_guard::ThreadGuard<P>> = Box_::new(glib::thread_guard::ThreadGuard::new(callback));
        unsafe extern "C" fn new_async_trampoline<P: FnOnce(Result<Client, glib::Error>) + 'static>(_source_object: *mut glib::gobject_ffi::GObject, res: *mut gio::ffi::GAsyncResult, user_data: glib::ffi::gpointer) {
            let mut error = ptr::null_mut();
            let ret = ffi::nm_client_new_finish(res, &mut error);
            let result = if error.is_null() { Ok(from_glib_full(ret)) } else { Err(from_glib_full(error)) };
            let callback: Box_<glib::thread_guard::ThreadGuard<P>> = Box_::from_raw(user_data as *mut _);
            let callback: P = callback.into_inner();
            callback(result);
        }
        let callback = new_async_trampoline::<P>;
        unsafe {
            ffi::nm_client_new_async(cancellable.map(|p| p.as_ref()).to_glib_none().0, Some(callback), Box_::into_raw(user_data) as *mut _);
        }
    }

    
    pub fn new_future() -> Pin<Box_<dyn std::future::Future<Output = Result<Client, glib::Error>> + 'static>> {

        Box_::pin(gio::GioFuture::new(&(), move |_obj, cancellable, send| {
            Self::new_async(
                Some(cancellable),
                move |res| {
                    send.resolve(res);
                },
            );
        }))
    }

    //#[doc(alias = "active-connection-added")]
    //pub fn connect_active_connection_added<Unsupported or ignored types>(&self, f: F) -> SignalHandlerId {
    //    Ignored active_connection: NM.ActiveConnection
    //}

    //#[doc(alias = "active-connection-removed")]
    //pub fn connect_active_connection_removed<Unsupported or ignored types>(&self, f: F) -> SignalHandlerId {
    //    Ignored active_connection: NM.ActiveConnection
    //}

    //#[doc(alias = "any-device-added")]
    //pub fn connect_any_device_added<Unsupported or ignored types>(&self, f: F) -> SignalHandlerId {
    //    Ignored device: NM.Device
    //}

    //#[doc(alias = "any-device-removed")]
    //pub fn connect_any_device_removed<Unsupported or ignored types>(&self, f: F) -> SignalHandlerId {
    //    Ignored device: NM.Device
    //}

    //#[doc(alias = "connection-added")]
    //pub fn connect_connection_added<Unsupported or ignored types>(&self, f: F) -> SignalHandlerId {
    //    Ignored connection: NM.RemoteConnection
    //}

    //#[doc(alias = "connection-removed")]
    //pub fn connect_connection_removed<Unsupported or ignored types>(&self, f: F) -> SignalHandlerId {
    //    Ignored connection: NM.RemoteConnection
    //}

    //#[doc(alias = "device-added")]
    //pub fn connect_device_added<Unsupported or ignored types>(&self, f: F) -> SignalHandlerId {
    //    Ignored device: NM.Device
    //}

    //#[doc(alias = "device-removed")]
    //pub fn connect_device_removed<Unsupported or ignored types>(&self, f: F) -> SignalHandlerId {
    //    Ignored device: NM.Device
    //}

    #[doc(alias = "permission-changed")]
    pub fn connect_permission_changed<F: Fn(&Self, u32, u32) + 'static>(&self, f: F) -> SignalHandlerId {
        unsafe extern "C" fn permission_changed_trampoline<F: Fn(&Client, u32, u32) + 'static>(this: *mut ffi::NMClient, permission: libc::c_uint, result: libc::c_uint, f: glib::ffi::gpointer) {
            let f: &F = &*(f as *const F);
            f(&from_glib_borrow(this), permission, result)
        }
        unsafe {
            let f: Box_<F> = Box_::new(f);
            connect_raw(self.as_ptr() as *mut _, b"permission-changed\0".as_ptr() as *const _,
                Some(transmute::<_, unsafe extern "C" fn()>(permission_changed_trampoline::<F> as *const ())), Box_::into_raw(f))
        }
    }

    #[doc(alias = "activating-connection")]
    pub fn connect_activating_connection_notify<F: Fn(&Self) + 'static>(&self, f: F) -> SignalHandlerId {
        unsafe extern "C" fn notify_activating_connection_trampoline<F: Fn(&Client) + 'static>(this: *mut ffi::NMClient, _param_spec: glib::ffi::gpointer, f: glib::ffi::gpointer) {
            let f: &F = &*(f as *const F);
            f(&from_glib_borrow(this))
        }
        unsafe {
            let f: Box_<F> = Box_::new(f);
            connect_raw(self.as_ptr() as *mut _, b"notify::activating-connection\0".as_ptr() as *const _,
                Some(transmute::<_, unsafe extern "C" fn()>(notify_activating_connection_trampoline::<F> as *const ())), Box_::into_raw(f))
        }
    }

    #[doc(alias = "active-connections")]
    pub fn connect_active_connections_notify<F: Fn(&Self) + 'static>(&self, f: F) -> SignalHandlerId {
        unsafe extern "C" fn notify_active_connections_trampoline<F: Fn(&Client) + 'static>(this: *mut ffi::NMClient, _param_spec: glib::ffi::gpointer, f: glib::ffi::gpointer) {
            let f: &F = &*(f as *const F);
            f(&from_glib_borrow(this))
        }
        unsafe {
            let f: Box_<F> = Box_::new(f);
            connect_raw(self.as_ptr() as *mut _, b"notify::active-connections\0".as_ptr() as *const _,
                Some(transmute::<_, unsafe extern "C" fn()>(notify_active_connections_trampoline::<F> as *const ())), Box_::into_raw(f))
        }
    }

    #[cfg(any(feature = "v1_2", feature = "dox"))]
    #[cfg_attr(feature = "dox", doc(cfg(feature = "v1_2")))]
    #[doc(alias = "all-devices")]
    pub fn connect_all_devices_notify<F: Fn(&Self) + 'static>(&self, f: F) -> SignalHandlerId {
        unsafe extern "C" fn notify_all_devices_trampoline<F: Fn(&Client) + 'static>(this: *mut ffi::NMClient, _param_spec: glib::ffi::gpointer, f: glib::ffi::gpointer) {
            let f: &F = &*(f as *const F);
            f(&from_glib_borrow(this))
        }
        unsafe {
            let f: Box_<F> = Box_::new(f);
            connect_raw(self.as_ptr() as *mut _, b"notify::all-devices\0".as_ptr() as *const _,
                Some(transmute::<_, unsafe extern "C" fn()>(notify_all_devices_trampoline::<F> as *const ())), Box_::into_raw(f))
        }
    }

    #[doc(alias = "can-modify")]
    pub fn connect_can_modify_notify<F: Fn(&Self) + 'static>(&self, f: F) -> SignalHandlerId {
        unsafe extern "C" fn notify_can_modify_trampoline<F: Fn(&Client) + 'static>(this: *mut ffi::NMClient, _param_spec: glib::ffi::gpointer, f: glib::ffi::gpointer) {
            let f: &F = &*(f as *const F);
            f(&from_glib_borrow(this))
        }
        unsafe {
            let f: Box_<F> = Box_::new(f);
            connect_raw(self.as_ptr() as *mut _, b"notify::can-modify\0".as_ptr() as *const _,
                Some(transmute::<_, unsafe extern "C" fn()>(notify_can_modify_trampoline::<F> as *const ())), Box_::into_raw(f))
        }
    }

    #[cfg(any(feature = "v1_24", feature = "dox"))]
    #[cfg_attr(feature = "dox", doc(cfg(feature = "v1_24")))]
    #[doc(alias = "capabilities")]
    pub fn connect_capabilities_notify<F: Fn(&Self) + 'static>(&self, f: F) -> SignalHandlerId {
        unsafe extern "C" fn notify_capabilities_trampoline<F: Fn(&Client) + 'static>(this: *mut ffi::NMClient, _param_spec: glib::ffi::gpointer, f: glib::ffi::gpointer) {
            let f: &F = &*(f as *const F);
            f(&from_glib_borrow(this))
        }
        unsafe {
            let f: Box_<F> = Box_::new(f);
            connect_raw(self.as_ptr() as *mut _, b"notify::capabilities\0".as_ptr() as *const _,
                Some(transmute::<_, unsafe extern "C" fn()>(notify_capabilities_trampoline::<F> as *const ())), Box_::into_raw(f))
        }
    }

    #[cfg(any(feature = "v1_12", feature = "dox"))]
    #[cfg_attr(feature = "dox", doc(cfg(feature = "v1_12")))]
    #[doc(alias = "checkpoints")]
    pub fn connect_checkpoints_notify<F: Fn(&Self) + 'static>(&self, f: F) -> SignalHandlerId {
        unsafe extern "C" fn notify_checkpoints_trampoline<F: Fn(&Client) + 'static>(this: *mut ffi::NMClient, _param_spec: glib::ffi::gpointer, f: glib::ffi::gpointer) {
            let f: &F = &*(f as *const F);
            f(&from_glib_borrow(this))
        }
        unsafe {
            let f: Box_<F> = Box_::new(f);
            connect_raw(self.as_ptr() as *mut _, b"notify::checkpoints\0".as_ptr() as *const _,
                Some(transmute::<_, unsafe extern "C" fn()>(notify_checkpoints_trampoline::<F> as *const ())), Box_::into_raw(f))
        }
    }

    #[doc(alias = "connections")]
    pub fn connect_connections_notify<F: Fn(&Self) + 'static>(&self, f: F) -> SignalHandlerId {
        unsafe extern "C" fn notify_connections_trampoline<F: Fn(&Client) + 'static>(this: *mut ffi::NMClient, _param_spec: glib::ffi::gpointer, f: glib::ffi::gpointer) {
            let f: &F = &*(f as *const F);
            f(&from_glib_borrow(this))
        }
        unsafe {
            let f: Box_<F> = Box_::new(f);
            connect_raw(self.as_ptr() as *mut _, b"notify::connections\0".as_ptr() as *const _,
                Some(transmute::<_, unsafe extern "C" fn()>(notify_connections_trampoline::<F> as *const ())), Box_::into_raw(f))
        }
    }

    #[doc(alias = "connectivity")]
    pub fn connect_connectivity_notify<F: Fn(&Self) + 'static>(&self, f: F) -> SignalHandlerId {
        unsafe extern "C" fn notify_connectivity_trampoline<F: Fn(&Client) + 'static>(this: *mut ffi::NMClient, _param_spec: glib::ffi::gpointer, f: glib::ffi::gpointer) {
            let f: &F = &*(f as *const F);
            f(&from_glib_borrow(this))
        }
        unsafe {
            let f: Box_<F> = Box_::new(f);
            connect_raw(self.as_ptr() as *mut _, b"notify::connectivity\0".as_ptr() as *const _,
                Some(transmute::<_, unsafe extern "C" fn()>(notify_connectivity_trampoline::<F> as *const ())), Box_::into_raw(f))
        }
    }

    #[doc(alias = "connectivity-check-available")]
    pub fn connect_connectivity_check_available_notify<F: Fn(&Self) + 'static>(&self, f: F) -> SignalHandlerId {
        unsafe extern "C" fn notify_connectivity_check_available_trampoline<F: Fn(&Client) + 'static>(this: *mut ffi::NMClient, _param_spec: glib::ffi::gpointer, f: glib::ffi::gpointer) {
            let f: &F = &*(f as *const F);
            f(&from_glib_borrow(this))
        }
        unsafe {
            let f: Box_<F> = Box_::new(f);
            connect_raw(self.as_ptr() as *mut _, b"notify::connectivity-check-available\0".as_ptr() as *const _,
                Some(transmute::<_, unsafe extern "C" fn()>(notify_connectivity_check_available_trampoline::<F> as *const ())), Box_::into_raw(f))
        }
    }

    #[doc(alias = "connectivity-check-enabled")]
    pub fn connect_connectivity_check_enabled_notify<F: Fn(&Self) + 'static>(&self, f: F) -> SignalHandlerId {
        unsafe extern "C" fn notify_connectivity_check_enabled_trampoline<F: Fn(&Client) + 'static>(this: *mut ffi::NMClient, _param_spec: glib::ffi::gpointer, f: glib::ffi::gpointer) {
            let f: &F = &*(f as *const F);
            f(&from_glib_borrow(this))
        }
        unsafe {
            let f: Box_<F> = Box_::new(f);
            connect_raw(self.as_ptr() as *mut _, b"notify::connectivity-check-enabled\0".as_ptr() as *const _,
                Some(transmute::<_, unsafe extern "C" fn()>(notify_connectivity_check_enabled_trampoline::<F> as *const ())), Box_::into_raw(f))
        }
    }

    #[cfg(any(feature = "v1_22", feature = "dox"))]
    #[cfg_attr(feature = "dox", doc(cfg(feature = "v1_22")))]
    #[doc(alias = "connectivity-check-uri")]
    pub fn connect_connectivity_check_uri_notify<F: Fn(&Self) + 'static>(&self, f: F) -> SignalHandlerId {
        unsafe extern "C" fn notify_connectivity_check_uri_trampoline<F: Fn(&Client) + 'static>(this: *mut ffi::NMClient, _param_spec: glib::ffi::gpointer, f: glib::ffi::gpointer) {
            let f: &F = &*(f as *const F);
            f(&from_glib_borrow(this))
        }
        unsafe {
            let f: Box_<F> = Box_::new(f);
            connect_raw(self.as_ptr() as *mut _, b"notify::connectivity-check-uri\0".as_ptr() as *const _,
                Some(transmute::<_, unsafe extern "C" fn()>(notify_connectivity_check_uri_trampoline::<F> as *const ())), Box_::into_raw(f))
        }
    }

    #[cfg(any(feature = "v1_22", feature = "dox"))]
    #[cfg_attr(feature = "dox", doc(cfg(feature = "v1_22")))]
    #[doc(alias = "dbus-name-owner")]
    pub fn connect_dbus_name_owner_notify<F: Fn(&Self) + 'static>(&self, f: F) -> SignalHandlerId {
        unsafe extern "C" fn notify_dbus_name_owner_trampoline<F: Fn(&Client) + 'static>(this: *mut ffi::NMClient, _param_spec: glib::ffi::gpointer, f: glib::ffi::gpointer) {
            let f: &F = &*(f as *const F);
            f(&from_glib_borrow(this))
        }
        unsafe {
            let f: Box_<F> = Box_::new(f);
            connect_raw(self.as_ptr() as *mut _, b"notify::dbus-name-owner\0".as_ptr() as *const _,
                Some(transmute::<_, unsafe extern "C" fn()>(notify_dbus_name_owner_trampoline::<F> as *const ())), Box_::into_raw(f))
        }
    }

    #[doc(alias = "devices")]
    pub fn connect_devices_notify<F: Fn(&Self) + 'static>(&self, f: F) -> SignalHandlerId {
        unsafe extern "C" fn notify_devices_trampoline<F: Fn(&Client) + 'static>(this: *mut ffi::NMClient, _param_spec: glib::ffi::gpointer, f: glib::ffi::gpointer) {
            let f: &F = &*(f as *const F);
            f(&from_glib_borrow(this))
        }
        unsafe {
            let f: Box_<F> = Box_::new(f);
            connect_raw(self.as_ptr() as *mut _, b"notify::devices\0".as_ptr() as *const _,
                Some(transmute::<_, unsafe extern "C" fn()>(notify_devices_trampoline::<F> as *const ())), Box_::into_raw(f))
        }
    }

    #[cfg(any(feature = "v1_6", feature = "dox"))]
    #[cfg_attr(feature = "dox", doc(cfg(feature = "v1_6")))]
    #[doc(alias = "dns-configuration")]
    pub fn connect_dns_configuration_notify<F: Fn(&Self) + 'static>(&self, f: F) -> SignalHandlerId {
        unsafe extern "C" fn notify_dns_configuration_trampoline<F: Fn(&Client) + 'static>(this: *mut ffi::NMClient, _param_spec: glib::ffi::gpointer, f: glib::ffi::gpointer) {
            let f: &F = &*(f as *const F);
            f(&from_glib_borrow(this))
        }
        unsafe {
            let f: Box_<F> = Box_::new(f);
            connect_raw(self.as_ptr() as *mut _, b"notify::dns-configuration\0".as_ptr() as *const _,
                Some(transmute::<_, unsafe extern "C" fn()>(notify_dns_configuration_trampoline::<F> as *const ())), Box_::into_raw(f))
        }
    }

    #[cfg(any(feature = "v1_6", feature = "dox"))]
    #[cfg_attr(feature = "dox", doc(cfg(feature = "v1_6")))]
    #[doc(alias = "dns-mode")]
    pub fn connect_dns_mode_notify<F: Fn(&Self) + 'static>(&self, f: F) -> SignalHandlerId {
        unsafe extern "C" fn notify_dns_mode_trampoline<F: Fn(&Client) + 'static>(this: *mut ffi::NMClient, _param_spec: glib::ffi::gpointer, f: glib::ffi::gpointer) {
            let f: &F = &*(f as *const F);
            f(&from_glib_borrow(this))
        }
        unsafe {
            let f: Box_<F> = Box_::new(f);
            connect_raw(self.as_ptr() as *mut _, b"notify::dns-mode\0".as_ptr() as *const _,
                Some(transmute::<_, unsafe extern "C" fn()>(notify_dns_mode_trampoline::<F> as *const ())), Box_::into_raw(f))
        }
    }

    #[cfg(any(feature = "v1_6", feature = "dox"))]
    #[cfg_attr(feature = "dox", doc(cfg(feature = "v1_6")))]
    #[doc(alias = "dns-rc-manager")]
    pub fn connect_dns_rc_manager_notify<F: Fn(&Self) + 'static>(&self, f: F) -> SignalHandlerId {
        unsafe extern "C" fn notify_dns_rc_manager_trampoline<F: Fn(&Client) + 'static>(this: *mut ffi::NMClient, _param_spec: glib::ffi::gpointer, f: glib::ffi::gpointer) {
            let f: &F = &*(f as *const F);
            f(&from_glib_borrow(this))
        }
        unsafe {
            let f: Box_<F> = Box_::new(f);
            connect_raw(self.as_ptr() as *mut _, b"notify::dns-rc-manager\0".as_ptr() as *const _,
                Some(transmute::<_, unsafe extern "C" fn()>(notify_dns_rc_manager_trampoline::<F> as *const ())), Box_::into_raw(f))
        }
    }

    #[doc(alias = "hostname")]
    pub fn connect_hostname_notify<F: Fn(&Self) + 'static>(&self, f: F) -> SignalHandlerId {
        unsafe extern "C" fn notify_hostname_trampoline<F: Fn(&Client) + 'static>(this: *mut ffi::NMClient, _param_spec: glib::ffi::gpointer, f: glib::ffi::gpointer) {
            let f: &F = &*(f as *const F);
            f(&from_glib_borrow(this))
        }
        unsafe {
            let f: Box_<F> = Box_::new(f);
            connect_raw(self.as_ptr() as *mut _, b"notify::hostname\0".as_ptr() as *const _,
                Some(transmute::<_, unsafe extern "C" fn()>(notify_hostname_trampoline::<F> as *const ())), Box_::into_raw(f))
        }
    }

    #[cfg(any(feature = "v1_24", feature = "dox"))]
    #[cfg_attr(feature = "dox", doc(cfg(feature = "v1_24")))]
    #[doc(alias = "instance-flags")]
    pub fn connect_instance_flags_notify<F: Fn(&Self) + 'static>(&self, f: F) -> SignalHandlerId {
        unsafe extern "C" fn notify_instance_flags_trampoline<F: Fn(&Client) + 'static>(this: *mut ffi::NMClient, _param_spec: glib::ffi::gpointer, f: glib::ffi::gpointer) {
            let f: &F = &*(f as *const F);
            f(&from_glib_borrow(this))
        }
        unsafe {
            let f: Box_<F> = Box_::new(f);
            connect_raw(self.as_ptr() as *mut _, b"notify::instance-flags\0".as_ptr() as *const _,
                Some(transmute::<_, unsafe extern "C" fn()>(notify_instance_flags_trampoline::<F> as *const ())), Box_::into_raw(f))
        }
    }

    #[cfg(any(feature = "v1_2", feature = "dox"))]
    #[cfg_attr(feature = "dox", doc(cfg(feature = "v1_2")))]
    #[doc(alias = "metered")]
    pub fn connect_metered_notify<F: Fn(&Self) + 'static>(&self, f: F) -> SignalHandlerId {
        unsafe extern "C" fn notify_metered_trampoline<F: Fn(&Client) + 'static>(this: *mut ffi::NMClient, _param_spec: glib::ffi::gpointer, f: glib::ffi::gpointer) {
            let f: &F = &*(f as *const F);
            f(&from_glib_borrow(this))
        }
        unsafe {
            let f: Box_<F> = Box_::new(f);
            connect_raw(self.as_ptr() as *mut _, b"notify::metered\0".as_ptr() as *const _,
                Some(transmute::<_, unsafe extern "C" fn()>(notify_metered_trampoline::<F> as *const ())), Box_::into_raw(f))
        }
    }

    #[doc(alias = "networking-enabled")]
    pub fn connect_networking_enabled_notify<F: Fn(&Self) + 'static>(&self, f: F) -> SignalHandlerId {
        unsafe extern "C" fn notify_networking_enabled_trampoline<F: Fn(&Client) + 'static>(this: *mut ffi::NMClient, _param_spec: glib::ffi::gpointer, f: glib::ffi::gpointer) {
            let f: &F = &*(f as *const F);
            f(&from_glib_borrow(this))
        }
        unsafe {
            let f: Box_<F> = Box_::new(f);
            connect_raw(self.as_ptr() as *mut _, b"notify::networking-enabled\0".as_ptr() as *const _,
                Some(transmute::<_, unsafe extern "C" fn()>(notify_networking_enabled_trampoline::<F> as *const ())), Box_::into_raw(f))
        }
    }

    #[doc(alias = "nm-running")]
    pub fn connect_nm_running_notify<F: Fn(&Self) + 'static>(&self, f: F) -> SignalHandlerId {
        unsafe extern "C" fn notify_nm_running_trampoline<F: Fn(&Client) + 'static>(this: *mut ffi::NMClient, _param_spec: glib::ffi::gpointer, f: glib::ffi::gpointer) {
            let f: &F = &*(f as *const F);
            f(&from_glib_borrow(this))
        }
        unsafe {
            let f: Box_<F> = Box_::new(f);
            connect_raw(self.as_ptr() as *mut _, b"notify::nm-running\0".as_ptr() as *const _,
                Some(transmute::<_, unsafe extern "C" fn()>(notify_nm_running_trampoline::<F> as *const ())), Box_::into_raw(f))
        }
    }

    #[cfg(any(feature = "v1_24", feature = "dox"))]
    #[cfg_attr(feature = "dox", doc(cfg(feature = "v1_24")))]
    #[doc(alias = "permissions-state")]
    pub fn connect_permissions_state_notify<F: Fn(&Self) + 'static>(&self, f: F) -> SignalHandlerId {
        unsafe extern "C" fn notify_permissions_state_trampoline<F: Fn(&Client) + 'static>(this: *mut ffi::NMClient, _param_spec: glib::ffi::gpointer, f: glib::ffi::gpointer) {
            let f: &F = &*(f as *const F);
            f(&from_glib_borrow(this))
        }
        unsafe {
            let f: Box_<F> = Box_::new(f);
            connect_raw(self.as_ptr() as *mut _, b"notify::permissions-state\0".as_ptr() as *const _,
                Some(transmute::<_, unsafe extern "C" fn()>(notify_permissions_state_trampoline::<F> as *const ())), Box_::into_raw(f))
        }
    }

    #[doc(alias = "primary-connection")]
    pub fn connect_primary_connection_notify<F: Fn(&Self) + 'static>(&self, f: F) -> SignalHandlerId {
        unsafe extern "C" fn notify_primary_connection_trampoline<F: Fn(&Client) + 'static>(this: *mut ffi::NMClient, _param_spec: glib::ffi::gpointer, f: glib::ffi::gpointer) {
            let f: &F = &*(f as *const F);
            f(&from_glib_borrow(this))
        }
        unsafe {
            let f: Box_<F> = Box_::new(f);
            connect_raw(self.as_ptr() as *mut _, b"notify::primary-connection\0".as_ptr() as *const _,
                Some(transmute::<_, unsafe extern "C" fn()>(notify_primary_connection_trampoline::<F> as *const ())), Box_::into_raw(f))
        }
    }

    #[doc(alias = "startup")]
    pub fn connect_startup_notify<F: Fn(&Self) + 'static>(&self, f: F) -> SignalHandlerId {
        unsafe extern "C" fn notify_startup_trampoline<F: Fn(&Client) + 'static>(this: *mut ffi::NMClient, _param_spec: glib::ffi::gpointer, f: glib::ffi::gpointer) {
            let f: &F = &*(f as *const F);
            f(&from_glib_borrow(this))
        }
        unsafe {
            let f: Box_<F> = Box_::new(f);
            connect_raw(self.as_ptr() as *mut _, b"notify::startup\0".as_ptr() as *const _,
                Some(transmute::<_, unsafe extern "C" fn()>(notify_startup_trampoline::<F> as *const ())), Box_::into_raw(f))
        }
    }

    #[doc(alias = "state")]
    pub fn connect_state_notify<F: Fn(&Self) + 'static>(&self, f: F) -> SignalHandlerId {
        unsafe extern "C" fn notify_state_trampoline<F: Fn(&Client) + 'static>(this: *mut ffi::NMClient, _param_spec: glib::ffi::gpointer, f: glib::ffi::gpointer) {
            let f: &F = &*(f as *const F);
            f(&from_glib_borrow(this))
        }
        unsafe {
            let f: Box_<F> = Box_::new(f);
            connect_raw(self.as_ptr() as *mut _, b"notify::state\0".as_ptr() as *const _,
                Some(transmute::<_, unsafe extern "C" fn()>(notify_state_trampoline::<F> as *const ())), Box_::into_raw(f))
        }
    }

    #[doc(alias = "version")]
    pub fn connect_version_notify<F: Fn(&Self) + 'static>(&self, f: F) -> SignalHandlerId {
        unsafe extern "C" fn notify_version_trampoline<F: Fn(&Client) + 'static>(this: *mut ffi::NMClient, _param_spec: glib::ffi::gpointer, f: glib::ffi::gpointer) {
            let f: &F = &*(f as *const F);
            f(&from_glib_borrow(this))
        }
        unsafe {
            let f: Box_<F> = Box_::new(f);
            connect_raw(self.as_ptr() as *mut _, b"notify::version\0".as_ptr() as *const _,
                Some(transmute::<_, unsafe extern "C" fn()>(notify_version_trampoline::<F> as *const ())), Box_::into_raw(f))
        }
    }

    #[cfg_attr(feature = "v1_22", deprecated = "Since 1.22")]
    #[doc(alias = "wimax-enabled")]
    pub fn connect_wimax_enabled_notify<F: Fn(&Self) + 'static>(&self, f: F) -> SignalHandlerId {
        unsafe extern "C" fn notify_wimax_enabled_trampoline<F: Fn(&Client) + 'static>(this: *mut ffi::NMClient, _param_spec: glib::ffi::gpointer, f: glib::ffi::gpointer) {
            let f: &F = &*(f as *const F);
            f(&from_glib_borrow(this))
        }
        unsafe {
            let f: Box_<F> = Box_::new(f);
            connect_raw(self.as_ptr() as *mut _, b"notify::wimax-enabled\0".as_ptr() as *const _,
                Some(transmute::<_, unsafe extern "C" fn()>(notify_wimax_enabled_trampoline::<F> as *const ())), Box_::into_raw(f))
        }
    }

    #[cfg_attr(feature = "v1_22", deprecated = "Since 1.22")]
    #[doc(alias = "wimax-hardware-enabled")]
    pub fn connect_wimax_hardware_enabled_notify<F: Fn(&Self) + 'static>(&self, f: F) -> SignalHandlerId {
        unsafe extern "C" fn notify_wimax_hardware_enabled_trampoline<F: Fn(&Client) + 'static>(this: *mut ffi::NMClient, _param_spec: glib::ffi::gpointer, f: glib::ffi::gpointer) {
            let f: &F = &*(f as *const F);
            f(&from_glib_borrow(this))
        }
        unsafe {
            let f: Box_<F> = Box_::new(f);
            connect_raw(self.as_ptr() as *mut _, b"notify::wimax-hardware-enabled\0".as_ptr() as *const _,
                Some(transmute::<_, unsafe extern "C" fn()>(notify_wimax_hardware_enabled_trampoline::<F> as *const ())), Box_::into_raw(f))
        }
    }

    #[doc(alias = "wireless-enabled")]
    pub fn connect_wireless_enabled_notify<F: Fn(&Self) + 'static>(&self, f: F) -> SignalHandlerId {
        unsafe extern "C" fn notify_wireless_enabled_trampoline<F: Fn(&Client) + 'static>(this: *mut ffi::NMClient, _param_spec: glib::ffi::gpointer, f: glib::ffi::gpointer) {
            let f: &F = &*(f as *const F);
            f(&from_glib_borrow(this))
        }
        unsafe {
            let f: Box_<F> = Box_::new(f);
            connect_raw(self.as_ptr() as *mut _, b"notify::wireless-enabled\0".as_ptr() as *const _,
                Some(transmute::<_, unsafe extern "C" fn()>(notify_wireless_enabled_trampoline::<F> as *const ())), Box_::into_raw(f))
        }
    }

    #[doc(alias = "wireless-hardware-enabled")]
    pub fn connect_wireless_hardware_enabled_notify<F: Fn(&Self) + 'static>(&self, f: F) -> SignalHandlerId {
        unsafe extern "C" fn notify_wireless_hardware_enabled_trampoline<F: Fn(&Client) + 'static>(this: *mut ffi::NMClient, _param_spec: glib::ffi::gpointer, f: glib::ffi::gpointer) {
            let f: &F = &*(f as *const F);
            f(&from_glib_borrow(this))
        }
        unsafe {
            let f: Box_<F> = Box_::new(f);
            connect_raw(self.as_ptr() as *mut _, b"notify::wireless-hardware-enabled\0".as_ptr() as *const _,
                Some(transmute::<_, unsafe extern "C" fn()>(notify_wireless_hardware_enabled_trampoline::<F> as *const ())), Box_::into_raw(f))
        }
    }

    #[doc(alias = "wwan-enabled")]
    pub fn connect_wwan_enabled_notify<F: Fn(&Self) + 'static>(&self, f: F) -> SignalHandlerId {
        unsafe extern "C" fn notify_wwan_enabled_trampoline<F: Fn(&Client) + 'static>(this: *mut ffi::NMClient, _param_spec: glib::ffi::gpointer, f: glib::ffi::gpointer) {
            let f: &F = &*(f as *const F);
            f(&from_glib_borrow(this))
        }
        unsafe {
            let f: Box_<F> = Box_::new(f);
            connect_raw(self.as_ptr() as *mut _, b"notify::wwan-enabled\0".as_ptr() as *const _,
                Some(transmute::<_, unsafe extern "C" fn()>(notify_wwan_enabled_trampoline::<F> as *const ())), Box_::into_raw(f))
        }
    }

    #[doc(alias = "wwan-hardware-enabled")]
    pub fn connect_wwan_hardware_enabled_notify<F: Fn(&Self) + 'static>(&self, f: F) -> SignalHandlerId {
        unsafe extern "C" fn notify_wwan_hardware_enabled_trampoline<F: Fn(&Client) + 'static>(this: *mut ffi::NMClient, _param_spec: glib::ffi::gpointer, f: glib::ffi::gpointer) {
            let f: &F = &*(f as *const F);
            f(&from_glib_borrow(this))
        }
        unsafe {
            let f: Box_<F> = Box_::new(f);
            connect_raw(self.as_ptr() as *mut _, b"notify::wwan-hardware-enabled\0".as_ptr() as *const _,
                Some(transmute::<_, unsafe extern "C" fn()>(notify_wwan_hardware_enabled_trampoline::<F> as *const ())), Box_::into_raw(f))
        }
    }
}

impl fmt::Display for Client {
    fn fmt(&self, f: &mut fmt::Formatter) -> fmt::Result {
        f.write_str("Client")
    }
}
